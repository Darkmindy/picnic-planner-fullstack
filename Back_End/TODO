generale 
✔ modificare il file README.md relativamente alla descrizione del progetto, funzionalità, tecnologie usate (eventuali implementazioni) @done(24-07-04 10:44)
✔ modificare la struttura dei controller dello user, rendendola unica (es. "user.controller.ts") @done(24-07-03 16:12)
☐ considerare di integrare una logica di migrazione del database (chiedi file di possibile esempio ad Andrea)

user
✔ creare array di eventi negli utenti @started(24-06-28 22:27) @done(24-06-28 22:29) @lasted(2m26s)
✔ creare rotta mostra tutti gli amici @started(24-06-28 22:30) @done(24-06-28 23:16) @lasted(46m10s)
✔ creare rotta con tutti gli eventi del singolo user @started(24-06-28 23:38) @done(24-07-01 18:06) @lasted(2d18h28m20s)
✔ creare rotta con tutti gli eventi del singolo user @started(24-06-30 20:04) @done(24-06-30 20:16) @lasted(12m46s)
✔ gestire errore relativo ad un utente che prova a loggare senza essere registrato @done(24-07-02 15:05)
✔ formattare le response, e le response lato client @done(24-07-03 11:20)
☐ considerare di introdurre un role "guest"

refreshToken
☐ modificare la logica di createdAt con la proprietà {timestamps: true} di mongoose integrandola con la proprietà virtual 'isExpired'

eventi
✔ creare rotta con tutti gli eventi @done(24-07-03 11:20)
☐ implementare rotta per tutti gli eventi considerando di aggiungere il checkRoleMiddleware
☐ implementare data e ora in formato date
☐ implentare stato [attivo, concluso, cancellato]; lo stato "cancellato" potrebbe riguardare un implementazione per la rimozione di un evento
☐ evento accesso libero, ad invito, a pagamento
☐ contatore numero di partecipanti
☐ contatore mi piace
☐ contatore non mi piace
☐ implentare ordine cronologico eventi (front o back)
✔ rotta modifica evento @done(24-07-03 11:22)
✔ rotta elimina evento @done(24-07-03 11:22)
✔ modificare al fine di semplificare il service e la logica per creare un evento e pusharlo nell'user's events array @done(24-07-03 16:13)
☐ valutare se utile creare un utilizzo in parallelo dei service "updateEvent" e "updateUserEvents" (utilizzare " Promise.all" in "updateEventHandler")

friends
✔ gestire il caso in cui un utente prova ad aggiungere se stesso come amico @done(24-07-03 12:11)
✔ creare i services per friends distinti da quelli degli users @done(24-07-03 12:22)
✔ rotta per rimuovere l'amici dall'user's friends array @done(24-07-03 13:04)
☐ valutare di utilizzare la logica relativa a controllare il friendId per verificare se esiste nel db, oppure quella attuale che fa lo stesso controllo utilizzando la funzione isFriendAlreadyAdded

messages
☐ creare un interfaccia Message del tipo: "content": string, "sender": string (id), "recipient": string (id), "createdAt": Date (oppure un timestamps)
☐ creare una rotta per la creazione del messaggio

calendar
☐ capire che libreria utilizzare

maps
☐ capire che libreria utilizzare

menu suggestion

ticket